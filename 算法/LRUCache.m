//
//  LRUCache.m
//  算法
//
//  Created by rumble on 2020/9/3.
//  Copyright © 2020 rumble. All rights reserved.
//          时间              次数         次数加时间[先按照时间顺序  缓存命中排前面 删除后面的]
//  淘汰策略：先进先出策略  最少使用策略 LFU  最近最少使用策略 LRU

//如果此数据之前已经被缓存在链表中了，通过遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。
//
//如果此数据没有在缓存链表中，可以分为两种情况：
//
//如果此时缓存未满，则将此结点直接插入到链表的头部；
//
//如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。

#import "LRUCache.h"

@implementation LRUCache

@end
